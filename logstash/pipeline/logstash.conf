input {
  beats {
    port => 5044
  }
}

filter {
  ###############################
  # METRICBEAT
  ###############################
  if [@metadata][beat] == "logstash" {
    mutate {
      add_tag => ["logstash", "siem"]
    }

    # 1. Module beat (giám sát Beat khác)
    if [event][module] == "beat" {
      mutate {
        add_tag => ["beat_monitoring"]
      }

      if [metricset][name] == "stats" {
        mutate {
          add_tag => ["beat_stats"]
          rename => {
            "[beat][name]"         => "beat_name"
            "[beat][type]"         => "beat_type"
            "[beat][uuid]"         => "beat_uuid"
            "[beat][version]"      => "beat_version"
            "[beat][host]"         => "beat_host"
            "[beat][ephemeral_id]" => "beat_ephemeral_id"
            "[system][cpu][total][pct]" => "cpu_usage_pct"
            "[system][memory][used][pct]" => "memory_used_pct"
            "[system][diskio][read][bytes]" => "diskio_read_bytes"
            "[system][diskio][write][bytes]" => "diskio_write_bytes"
          }
        }

        date {
          match => [ "[@timestamp]", "ISO8601" ]
        }
      }

      if [metricset][name] == "state" {
        mutate {
          add_tag => ["beat_state"]
          rename => {
            "[beat_state][host]"          => "beat_state_host"
            "[beat_state][output][type]" => "beat_output_type"
            "[beat_state][output][name]" => "beat_output_name"
          }
        }
      }
    }

    # 2. Các module khác
    else {
      mutate {
        add_tag => ["system_metrics"]
      }

      if [system][cpu] {
        mutate {
          rename => {
            "[system][cpu][total][pct]" => "system_cpu_usage_pct"
          }
        }
      }

      if [system][memory] {
        mutate {
          rename => {
            "[system][memory][used][pct]" => "system_memory_used_pct"
          }
        }
      }

      if [system][diskio] {
        mutate {
          add_tag => ["diskio_metrics"]
          rename => {
            "[system][diskio][read][count]"   => "diskio_read_count"
            "[system][diskio][read][time]"    => "diskio_read_time"
            "[system][diskio][write][count]"  => "diskio_write_count"
            "[system][diskio][write][time]"   => "diskio_write_time"
            "[system][diskio][io][ops]"       => "diskio_ops"
            "[system][diskio][io][time]"      => "diskio_io_time"
            "[system][diskio][serial_number]" => "diskio_serial"
            "[system][diskio][name]"          => "diskio_device_name"
            "[system][diskio][read][bytes]"   => "diskio_read_bytes"
            "[system][diskio][write][bytes]"  => "diskio_write_bytes"
          }
        }
      }

      if [host][hostname] {
        mutate {
          rename => {
            "[host][hostname]" => "host_name"
            "[host][ip]" => "host_ip"
            "[host][os][name]" => "host_os_name"
            "[host][os][version]" => "host_os_version"
            "[host][os][platform]" => "host_os_platform"
          }
        }
      }
    }

    mutate {
      convert => {
        "cpu_usage_pct" => "float"
        "memory_used_pct" => "float"
        "diskio_read_bytes" => "integer"
        "diskio_write_bytes" => "integer"
        "system_cpu_usage_pct" => "float"
        "system_memory_used_pct" => "float"
        "diskio_read_count" => "integer"
        "diskio_read_time" => "integer"
        "diskio_write_count" => "integer"
        "diskio_write_time" => "integer"
        "diskio_ops" => "integer"
        "diskio_io_time" => "integer"
      }
    }

    mutate {
      lowercase => [ "beat_type", "beat_output_type", "beat_name" ]
    }

    mutate {
      remove_field => ["agent", "input", "meta"]
    }
  }

  ###############################
  # FILEBEAT
  ###############################
  else if [@metadata][beat] == "logstash_filebeat" {
    mutate {
      add_tag => ["filebeat", "siem"]
    }

    # Giải quyết syslog logs hoặc bất kỳ log chung nào khác
    if "syslog" in [fileset][name] or "system" in [event][module] {
      grok {
        match => {
          "message" => "%{SYSLOGTIMESTAMP:syslog_timestamp} %{SYSLOGHOST:syslog_host} %{DATA:syslog_program}(?:\[%{POSINT:syslog_pid}\])?: %{GREEDYDATA:syslog_message}"
        }
        overwrite => [ "message" ]
      }

      date {
        match => [ "syslog_timestamp", "MMM  d HH:mm:ss", "MMM dd HH:mm:ss" ]
        timezone => "UTC"
      }

      mutate {
        rename => {
          "[host][hostname]" => "host_name"
          "[host][ip]" => "host_ip"
          "[host][os][name]" => "host_os_name"
          "[host][os][version]" => "host_os_version"
          "[host][os][platform]" => "host_os_platform"
        }
      }
    }

    if [log][level] {
      mutate {
        rename => { "[log][level]" => "log_level" }
      }
    }

    if [process][name] {
      mutate {
        rename => { "[process][name]" => "process_name" }
      }
    }

    if [input][type] {
      mutate {
        rename => { "[input][type]" => "input_type" }
      }
    }

    mutate {
      lowercase => [ "log_level", "process_name", "input_type" ]
    }

    mutate {
      remove_field => ["agent", "event", "meta"]
    }
  }
}

# create debug output on terminal for diskio
output {
  if "diskio_metrics" in [tags] {
    stdout {
      codec => rubydebug { metadata => false }
    }
  }
}

output {
  elasticsearch {
    hosts => "http://elasticsearch:9200"
    user => "elastic"
    password => "${LOGSTASH_INTERNAL_PASSWORD}"
    data_stream => true
  }
}
